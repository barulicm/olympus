name: Release Assets

on:
  release:
    types: [ "published" ]
  workflow_dispatch:

jobs:
  job1:
    name: Build Linux Assets
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Get CMake
      uses: lukka/get-cmake@v3.30.3

    - name: Install Dependencies
      uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgDirectory: '${{ github.workspace }}/external/vcpkg'
        vcpkgJsonGlob: 'vcpkg.json'

    - name: Build and Test
      uses: lukka/run-cmake@v10.8
      with:
        workflowPreset: 'linux-package'

    - name: Publish Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{github.workspace}}/build/Olympus-*-Linux.deb
          ${{github.workspace}}/build/Olympus-*-Linux.zip

  job2:
    name: Build Windows Assets
    runs-on: windows-2019
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get CMake
        uses: lukka/get-cmake@v3.30.3

      - name: Install Dependencies
        uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: '${{ github.workspace }}/external/vcpkg'
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Build and Test
        uses: lukka/run-cmake@v10.8
        with:
          workflowPreset: 'windows-package'

      - name: Publish Assets
        uses: softprops/action-gh-release@v2
        if: ${{github.event_name == 'release'}}
        with:
          files: |
            ${{github.workspace}}/build/Olympus-*-win64.exe
            ${{github.workspace}}/build/Olympus-*-win64.zip

  job3:
    name: Publish Docker Image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ format('{0}/{1}', 'ghcr.io', github.repository) }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
